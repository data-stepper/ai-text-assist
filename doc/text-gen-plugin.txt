*text-gen-plugin.txt* An AI based text generation plugin for neovim.

                  Text generation plugin for neovim

==============================================================================

CONTENTS                                 *text-gen-plugin-contents*

    1. Introduction....................................|text-gen-plugin-intro|
	2. Usage...................................................|text-examples|
	3. Configuration..................................|text-gen-plugin-config|
	4. License.......................................|text-gen-plugin-license|
	5. Contributing..................................|text-gen-plugin-contrib|
	6. Credits.......................................|text-gen-plugin-credits|

Original Author:    Bent Mueller
License:            MIT

INTRODUCTION                                          *text-gen-plugin-intro*

This is a text generation plugin for neovim. It is designed to be used with
OpenAI's GPT-3 API and can be used for any text generation task inside neovim.
All commands are documented here below:

IMPORTANT: In order to run this plugin, an environment variable containing your
	API key must be set. This is done by running the following command in your
	shell export OPENAI_API_KEY="<your_api_key_here>"

	:TextGenGenerate -- Send a text generation request to the GPT-3 server.
	:TextGenChangeTokenLength -- Change the max token length for the responses.
	:TextGenChangeModel -- Change the model for the text generation.
	:TextGenStatus -- Get information about settings, usage, etc.

Available models are currently:

	text-davinci-002 	-- The strongest and most expensive model
	text-curie-001 		-- Very capable but more cheap and faster
	text-babbage-001 	-- Smaller and faster model with less capability
	text-ada-001 		-- The smallest and fastest model (not very capable)

As more models are added, they will be updated here. Soon we will also add the 
code generation models when they are available publicly.

USAGE 														*text-examples*

Basic usage:

1. Visually select a region of text and run :TextGenGenerate (or <C-g> by default)
2. You will be asked if you really want to submit the API request,
   how many tokens it will request, which model will be used and
   an estimation of the cost of the request.
3. Wait a couple of seconds for the response and the response will directly
   be inserted into the visually selected region.

CONFIGURATION 										*text-gen-plugin-config*

To configure the plugin, you can use the following commands:

	:TextGenChangeTokenLength -- Change the max token length for the responses.
	Default is 256, but you can change it to any number between 1 and 4096.
	Note that the models don't have to return that many tokens.

	:TextGenChangeModel -- Change the model for the text generation.
	Default is text-curie-001, but you can change it to any of the available
	models. When calling this command a list of available models will be shown.
	Note that the bigger models take longer to generate and are more expensive.

	:TextGenStatus -- Get information about settings, usage, etc.
	Also estimated total amount of money spent since installing the plugin.


LICENSE 											*text-gen-plugin-license*

This plugin is licensed under the MIT license. You can find the full license
in the LICENSE file in the repository root.

CONTRIBUTING 										*text-gen-plugin-contrib*

	Collaboration is encouraged! If you have any questions, suggestions or
	improvements, please open an issue on the GitHub repository, or create
	a pull request.

	Check out the GitHub repository for more information:

		https://github.com/data-stepper/ai-text-gen
	
	I certainly believe text / code generation will become one of the most
	important and impactful AI tasks in the future. This is why I believe that
	this plugin will allow many people to boost their productivity and skill.

CREDITS 											*text-gen-plugin-credits*

	This plugin was created by Bent Mueller. It is a work in progress and
	there will be more features added over time as I learn more about how
	to use GPT-3 effectively in code generation.

	I would also like to thank the OpenAI team for their API and the GPT-3
	model. It is a fantastic tool that I am very thankful for.



